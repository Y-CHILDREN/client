name: MAIN CI

on:
  push:
    branches:
      - main
    tags:
      - 'production-**'

jobs:
  Deploy:
    runs-on: ubuntu-latest
    env:
      VITE_ENV: ${{ secrets.VITE_ENV }}
      VITE_API_URL: ${{ secrets.VITE_API_URL }}
      VITE_AWS_EC2_GOOGLE_CALLBACK_URL: ${{ secrets.VITE_AWS_EC2_GOOGLE_CALLBACK_URL }}
      VITE_AWS_EC2_KAKAO_CALLBACK_URL: ${{ secrets.VITE_AWS_EC2_KAKAO_CALLBACK_URL }}
      VITE_AWS_EC2_NAVER_CALLBACK_URL: ${{ secrets.VITE_AWS_EC2_NAVER_CALLBACK_URL }}
      VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
      VITE_APP_FCM_API_KEY: ${{ secrets.VITE_APP_FCM_API_KEY }}
      VITE_APP_FCM_AUTH_DOMAIN: ${{ secrets.VITE_APP_FCM_AUTH_DOMAIN }}
      VITE_APP_FCM_PROJECT_ID: ${{ secrets.VITE_APP_FCM_PROJECT_ID }}
      VITE_APP_FCM_STORAGE_BUCKET: ${{ secrets.VITE_APP_FCM_STORAGE_BUCKET }}
      VITE_APP_FCM_MESSAGING_SENDER_ID: ${{ secrets.VITE_APP_FCM_MESSAGING_SENDER_ID }}
      VITE_APP_FCM_APP_ID: ${{ secrets.VITE_APP_FCM_APP_ID }}
      VITE_APP_FCM_MEASUREMENT_ID: ${{ secrets.VITE_APP_FCM_MEASUREMENT_ID }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Cache node modules
        id: cache #
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install pnpm
        run: npm install -g pnpm
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install

      - name: Build
        run: pnpm build:prod

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: aws s3 sync ./dist s3://${{ secrets.AWS_BUCKET_NAME }} --delete

      - name: Invalidate CloudFront Cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_DISTRIBUTION_ID }} --paths "/*"
